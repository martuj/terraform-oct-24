1) Input Variables
Problem Statement:
Provision an AWS EC2 instance of type t2.medium using input variables, being passed from the command line. Allow users to specify:
 
Instance type (default: t2.micro)
Key pair name
AMI ID (default to Amazon Linux 2).
 
Solution:
 
# variables.tf
 
variable "instance_type" {
  default = "t2.micro"
  description = "Type of the instance"
}
 
variable "key_name" {
  description = "Key pair name for SSH access"
}
 
variable "ami_id" {
  default = "ami-0c02fb55956c7d316" # Amazon Linux 2
  description = "AMI ID for the instance"
}
 
# main.tf
provider "aws" {
  region = "us-east-1"
}
 
resource "aws_instance" "example" {
  ami           = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name
}
 
# Command to run:
# terraform apply -var="key_name=your-name" -var="instance_type=t2.medium"
 
 
 
2) Output Variables
Problem Statement:
Extend the EC2 configuration to display:
 
Instance ID
Public IP address
Availability zone
 

Solution:
 

# outputs.tf
output "instance_id" {
  value = aws_instance.example.id
}
 
output "public_ip" {
  value = aws_instance.example.public_ip
}
 
output "availability_zone" {
  value = aws_instance.example.availability_zone
}
 

3) Functions
Problem Statement:
Provision multiple S3 buckets. Use the length() function to count the buckets, and the upper() function to create buckets with names in uppercase.
 
Solution:
 

# variables.tf
variable "bucket_names" {
  type = list(string)
}
 
# main.tf
provider "aws" {
  region = "us-east-1"
}
 
resource "aws_s3_bucket" "buckets" {
  for_each = toset(var.bucket_names)
 
  bucket = upper(each.key)
}
 
output "bucket_count" {
  value = length(var.bucket_names)
}
 
# Command to run:
# terraform apply -var='bucket_names=["mybucket1", "mybucket2", "mybucket3"]'
 

4) Data Sources
Problem Statement:
Fetch information about the default VPC and use its subnet IDs to launch an EC2 instance in the first subnet.
 
Solution:

# main.tf
provider "aws" {
  region = "us-east-1"
}
 
data "aws_vpc" "default" {
  default = true
}
 
data "aws_subnet_ids" "default" {
  vpc_id = data.aws_vpc.default.id
}
 
resource "aws_instance" "example" {
  ami           = "ami-0c02fb55956c7d316"
  instance_type = "t2.micro"
  subnet_id     = data.aws_subnet_ids.default.ids[0]
}
 
output "subnet_id" {
  value = data.aws_subnet_ids.default.ids[0]
}
 
output "public_ip" {
  value = aws_instance.example.public_ip
}
